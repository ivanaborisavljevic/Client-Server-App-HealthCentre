/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import domen.Pacijent;
import domen.Pregled;
import domen.Sluzbenik;
import domen.Smena;
import domen.VrstaPregleda;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import javax.swing.plaf.FontUIResource;
import komunikacija.KomunikacijaSaServerom;
import komunikacija.TransferObjekatOdgovor;
import komunikacija.Operacije;
import komunikacija.TransferObjekatZahtev;
import kontroler.KontrolerKlijent;
import modeli.ModelTabeleDoktora;

/**
 *
 * @author Stefan
 */
public class FormaZakaziPregled extends javax.swing.JFrame {

    KontrolerKlijent kontrolerKlijent;
    Pacijent pacijent;
    FormaPretraziPacijenta fpp;
    Sluzbenik sluzbenik;

    private Object lastSelected = null;

    /**
     * Creates new form FormaZakaziPregled
     */



    public FormaZakaziPregled(Pacijent pacijent, FormaPretraziPacijenta fpp, Sluzbenik sluzbenik) {
       // Font f = new Font("serif", Font.PLAIN, 14);

        initComponents();
        tblSlobodniDoktori.setRowHeight(20);
        this.sluzbenik = sluzbenik;
        initUI();
        btnSacuvajPregled.setEnabled(false);
        txtDatum.setEnabled(true);
        txtVreme.setEnabled(true);
        ModelTabeleDoktora mtd = new ModelTabeleDoktora(new ArrayList<>());
        tblSlobodniDoktori.setModel(mtd);
        tblSlobodniDoktori.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        this.pacijent = pacijent;
        kontrolerKlijent = new KontrolerKlijent();
        chbDa.setSelected(false);
        chbDa.setEnabled(false);
        chbNe.setSelected(true);
        chbNe.setEnabled(false);
        lblImePrezimePacijenta.setText("Pacijent:                                     " + pacijent.getImePrezime());
        KontrolerKlijent.ucitajKomboVrstaPregleda(this, cbVrstaPregleda);
        cbVrstaPregleda.setMaximumRowCount(cbVrstaPregleda.getModel().getSize());

        tblSlobodniDoktori.setVisible(false);
        this.fpp = fpp;
        this.setVisible(true);
    }
    
    private void initUI() {

        setSize(600, 800);
        centerFrame();
        setTitle("Zakazivanje pregleda forma");
        //setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    private void centerFrame() {

        Dimension windowSize = getSize();
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Point centerPoint = ge.getCenterPoint();

        int dx = centerPoint.x - windowSize.width / 2;
        int dy = centerPoint.y - windowSize.height / 2;
        setLocation(dx, dy);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblImePrezimePacijenta = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblSpecijalizacija = new javax.swing.JLabel();
        cbVrstaPregleda = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDatum = new javax.swing.JTextField();
        txtVreme = new javax.swing.JTextField();
        lblObavljen = new javax.swing.JLabel();
        chbDa = new javax.swing.JCheckBox();
        chbNe = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSlobodniDoktori = new javax.swing.JTable();
        btnSacuvajPregled = new javax.swing.JButton();
        btnOtkazi = new javax.swing.JButton();
        btnPrikaziDoktore = new javax.swing.JButton();
        lblValDoktori = new javax.swing.JLabel();
        lblValDatumPrazno = new javax.swing.JLabel();
        lblValVremePrazno = new javax.swing.JLabel();
        lblValDatumFormat = new javax.swing.JLabel();
        lblValVremeFormat = new javax.swing.JLabel();
        lblValDatumPosleDanas = new javax.swing.JLabel();
        lblValVremeSmena = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Zakazivanje pregleda");

        lblImePrezimePacijenta.setText("Pacijent: ime i prezime pacijenta");

        jLabel1.setText("Vrsta pregleda:");

        jLabel2.setText("Specijalizacija:");

        lblSpecijalizacija.setText("specijalizacija");

        cbVrstaPregleda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbVrstaPregleda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbVrstaPregledaActionPerformed(evt);
            }
        });

        jLabel3.setText("Datum: (dd.MM.yyyy)");

        jLabel4.setText("Vreme:(HH:mm)");

        txtDatum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDatumActionPerformed(evt);
            }
        });
        txtDatum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDatumKeyTyped(evt);
            }
        });

        txtVreme.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtVremeKeyTyped(evt);
            }
        });

        lblObavljen.setText("Realizovan");

        chbDa.setText("Da");

        chbNe.setText("Ne");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Slobodni doktori"));

        tblSlobodniDoktori.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblSlobodniDoktori.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSlobodniDoktoriMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSlobodniDoktori);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSacuvajPregled.setText("Sacuvaj pregled");
        btnSacuvajPregled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajPregledActionPerformed(evt);
            }
        });

        btnOtkazi.setText("Otkazi");
        btnOtkazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtkaziActionPerformed(evt);
            }
        });

        btnPrikaziDoktore.setText("Prikazi slobodne doktore");
        btnPrikaziDoktore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrikaziDoktoreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblObavljen)
                    .addComponent(lblImePrezimePacijenta, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chbDa)
                                .addGap(18, 18, 18)
                                .addComponent(chbNe))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblSpecijalizacija, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                    .addComponent(cbVrstaPregleda, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtDatum, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblValDatumPrazno, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtVreme, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblValVremePrazno, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(btnSacuvajPregled)
                        .addGap(135, 135, 135)
                        .addComponent(btnOtkazi))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(btnPrikaziDoktore)))
                .addGap(70, 70, 70))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(lblValDoktori, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblValVremeSmena, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblValDatumFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblValVremeFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblValDatumPosleDanas, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImePrezimePacijenta, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbVrstaPregleda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSpecijalizacija)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblValDatumPrazno, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblValDatumFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblValDatumPosleDanas, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtVreme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValVremePrazno, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblValVremeFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblValVremeSmena, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chbDa)
                    .addComponent(chbNe)
                    .addComponent(lblObavljen))
                .addGap(23, 23, 23)
                .addComponent(btnPrikaziDoktore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblValDoktori, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOtkazi)
                    .addComponent(btnSacuvajPregled))
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbVrstaPregledaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbVrstaPregledaActionPerformed
        // TODO add your handling code here:
        VrstaPregleda vp = (VrstaPregleda) cbVrstaPregleda.getSelectedItem();
        if (vp != null) {
            lblSpecijalizacija.setText(vp.getSpecijalizacija().getNaziv());
            ModelTabeleDoktora mtd = (ModelTabeleDoktora) tblSlobodniDoktori.getModel();
            mtd.setListaDoktora(new ArrayList());
            mtd.fireTableDataChanged();
        }
    }//GEN-LAST:event_cbVrstaPregledaActionPerformed

    private void btnPrikaziDoktoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrikaziDoktoreActionPerformed
        // TODO add your handling code here:
        lblValDoktori.setText("");
        lblValDatumFormat.setText("");
        lblValDatumPosleDanas.setText("");
        lblValVremeFormat.setText("");
        lblValVremePrazno.setText("");
        lblValDatumPrazno.setText("");
        lblValVremeSmena.setText("");

        boolean test = false;
        if (txtDatum.getText().isEmpty()) {
            getLblValDatumPrazno().setForeground(Color.red);
            getLblValDatumPrazno().setText("*Polje datum je obavezno*");
            test = true;
        }

        if (txtVreme.getText().isEmpty()) {
            getLblValVremePrazno().setForeground(Color.red);
            getLblValVremePrazno().setText("*Polje vreme je obavezno*");
            test = true;
        }

        Date datum = null;
        String vreme = txtVreme.getText();
        Date vreme1 = null;

        boolean testdatum = false;
        boolean testvreme = false;
        if (test == false) {

            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
            sdf.setLenient(false);
            try {
                datum = sdf.parse(txtDatum.getText());
             Calendar cal = Calendar.getInstance();
             cal.setTime(new Date());
             cal.add(Calendar.YEAR, 1);
             Date datumGodinuOdSad = cal.getTime();
               
                if (datum.after(datumGodinuOdSad)){
                lblValDatumFormat.setForeground(Color.red);
                lblValDatumFormat.setText("*Pregledi se mogu zakazivati godinu dana od sadasnjeg trenutka*");
                test = true;
                }
            } catch (ParseException ex) {

                getLblValDatumFormat().setForeground(Color.red);
                getLblValDatumFormat().setText("*Datum mora biti u odgovarajucem formatu*");
                testdatum = true;
            }

            List<Smena> smene = vratiSmene();
            if (smene == null){
            JOptionPane.showMessageDialog(null, "Sistem ne može da nađe slobodne doktore!");
            }
            Smena maxKraj = smene.get(0);
            Smena minPocetak = smene.get(smene.size() - 1);
            for (int i = 0; i < smene.size(); i++) {
                if (Integer.parseInt(smene.get(i).getPocetak().split(":")[0]) < Integer.parseInt(minPocetak.getPocetak().split(":")[0])
                        || (Integer.parseInt(smene.get(i).getPocetak().split(":")[0]) == Integer.parseInt(minPocetak.getPocetak().split(":")[0]))
                        && Integer.parseInt(smene.get(i).getPocetak().split(":")[1]) < Integer.parseInt(minPocetak.getPocetak().split(":")[1])) {

                    minPocetak = smene.get(i);

                }

                if (Integer.parseInt(smene.get(i).getPocetak().split(":")[0]) > Integer.parseInt(minPocetak.getPocetak().split(":")[0])
                        || (Integer.parseInt(smene.get(i).getPocetak().split(":")[0]) == Integer.parseInt(minPocetak.getPocetak().split(":")[0]))
                        && Integer.parseInt(smene.get(i).getPocetak().split(":")[1]) > Integer.parseInt(minPocetak.getPocetak().split(":")[1])) {

                    maxKraj = smene.get(i);

                }

            }
            SimpleDateFormat sdfv = new SimpleDateFormat("HH:mm");
            sdfv.setLenient(false);
            Date pocetakRadnogVr = null;
            Date krajRadnogVr = null;
            try {
                krajRadnogVr = sdfv.parse(maxKraj.getKraj());
                pocetakRadnogVr = sdfv.parse(minPocetak.getPocetak());
            } catch (ParseException ex) {
                return;
            }

            try {

                vreme1 = sdfv.parse(vreme);

                int sati = (int) vreme1.getHours();
                int minuti = (int) vreme1.getMinutes();

                if (vreme1.before(pocetakRadnogVr) || vreme1.after(krajRadnogVr)) {

                    getLblValVremeSmena().setForeground(Color.red);
                    getLblValVremeSmena().setText("*Vreme mora biti u okviru radnog vremena, od " + pocetakRadnogVr.getHours() + " h " + pocetakRadnogVr.getMinutes() + " min, do " + krajRadnogVr.getHours() + " h " + krajRadnogVr.getMinutes() + " min*");
                    test = true;
                }
            } catch (ParseException ex) {

                getLblValVremeFormat().setForeground(Color.red);
                getLblValVremeFormat().setText("*Vreme mora biti u odgovarajucem formatu*");
                testvreme = true;
            }
            List<Pregled> pregledi = vratiPreglede();
            if (testvreme == false && testdatum == false) {

                Date datumIVreme = new Date(datum.getYear(), datum.getMonth(), datum.getDate(), vreme1.getHours(), vreme1.getMinutes());
                if (datumIVreme.before(new Date())) {
                    lblValDatumPosleDanas.setForeground(Color.red);
                    lblValDatumPosleDanas.setText("Datum i vreme ne mogu biti pre sadasnjeg trenutka");
                    test = true;
                }
                Date datumVremeZakazano = new Date(datum.getYear(), datum.getMonth(), datum.getDate(), vreme1.getHours(), vreme1.getMinutes());
                for (Pregled p : pregledi) {
                    int sati = Integer.parseInt(p.getVreme().split(":")[0]);
                    int minuti = Integer.parseInt(p.getVreme().split(":")[1]);
                    Date datumVreme = new Date(p.getDatum().getYear(), p.getDatum().getMonth(), p.getDatum().getDate(), sati, minuti);
                    if (datumVreme.equals(datumVremeZakazano)) {
                        lblValVremeSmena.setForeground(Color.red);
                        lblValVremeSmena.setText("*Pacijent vec ima zakazan pregled u to vreme, unesite drugi termin*");
                        test = true;
                        break;
                    }

                }

            }

        } else {
            return;
        }

        VrstaPregleda vp = (VrstaPregleda) cbVrstaPregleda.getSelectedItem();
        if (vp != null && test == false && testvreme == false && testdatum == false) {

            kontrolerKlijent.srediTabeluSlobodnihDoktora(vp, datum, vreme1, tblSlobodniDoktori);

            tblSlobodniDoktori.setVisible(true);

            btnSacuvajPregled.setEnabled(true);
        }

    }//GEN-LAST:event_btnPrikaziDoktoreActionPerformed

    private void btnOtkaziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtkaziActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnOtkaziActionPerformed

    public JLabel getLblValVremeFormat() {
        return lblValVremeFormat;
    }

    /*public JLabel getLblValVremeCifre() {
        return lblValVremeCifre;
    }*/
    public JLabel getLblValDatumPosleDanas() {
        return lblValDatumPosleDanas;
    }

    public JLabel getLblValDoktori() {
        return lblValDoktori;
    }

    public JLabel getLblValDatumFormat() {
        return lblValDatumFormat;
    }

    public JTable getTblSlobodniDoktori() {
        return tblSlobodniDoktori;
    }

    public JLabel getLblValDatumPrazno() {
        return lblValDatumPrazno;
    }

    public JLabel getLblValVremePrazno() {
        return lblValVremePrazno;
    }


    private void btnSacuvajPregledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajPregledActionPerformed
        // TODO add your handling code here:
        lblValDoktori.setText("");
        lblValDatumFormat.setText("");
        lblValDatumPosleDanas.setText("");
        lblValVremeFormat.setText("");
        lblValVremePrazno.setText("");
        lblValDatumPrazno.setText("");
        lblValVremeSmena.setText("");
        VrstaPregleda vp = (VrstaPregleda) cbVrstaPregleda.getSelectedItem();
        boolean realizovan = false;

        kontrolerKlijent.zapamtiPregled(fpp, this, pacijent, txtDatum, txtVreme, vp, realizovan, tblSlobodniDoktori, sluzbenik);

    }//GEN-LAST:event_btnSacuvajPregledActionPerformed

    public JLabel getLblValVremeSmena() {
        return lblValVremeSmena;
    }

    private void tblSlobodniDoktoriMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSlobodniDoktoriMouseClicked
        Object current = ((ModelTabeleDoktora) tblSlobodniDoktori.getModel()).getDoktor(tblSlobodniDoktori.getSelectedRow());
        if (current != null && current == lastSelected) {
            tblSlobodniDoktori.getSelectionModel().clearSelection();
            lastSelected = null;
        } else {
            lastSelected = current;
        }
    }//GEN-LAST:event_tblSlobodniDoktoriMouseClicked

    private void txtDatumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDatumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDatumActionPerformed

    private void txtDatumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDatumKeyTyped
        // TODO add your handling code here:
        ModelTabeleDoktora mtd = (ModelTabeleDoktora) tblSlobodniDoktori.getModel();
        mtd.setListaDoktora(new ArrayList());
        mtd.fireTableDataChanged();
    }//GEN-LAST:event_txtDatumKeyTyped

    private void txtVremeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVremeKeyTyped
        // TODO add your handling code here:
        ModelTabeleDoktora mtd = (ModelTabeleDoktora) tblSlobodniDoktori.getModel();
        mtd.setListaDoktora(new ArrayList());
        mtd.fireTableDataChanged();

    }//GEN-LAST:event_txtVremeKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOtkazi;
    private javax.swing.JButton btnPrikaziDoktore;
    private javax.swing.JButton btnSacuvajPregled;
    private javax.swing.JComboBox<Object> cbVrstaPregleda;
    private javax.swing.JCheckBox chbDa;
    private javax.swing.JCheckBox chbNe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblImePrezimePacijenta;
    private javax.swing.JLabel lblObavljen;
    private javax.swing.JLabel lblSpecijalizacija;
    private javax.swing.JLabel lblValDatumFormat;
    private javax.swing.JLabel lblValDatumPosleDanas;
    private javax.swing.JLabel lblValDatumPrazno;
    private javax.swing.JLabel lblValDoktori;
    private javax.swing.JLabel lblValVremeFormat;
    private javax.swing.JLabel lblValVremePrazno;
    private javax.swing.JLabel lblValVremeSmena;
    private javax.swing.JTable tblSlobodniDoktori;
    private javax.swing.JTextField txtDatum;
    private javax.swing.JTextField txtVreme;
    // End of variables declaration//GEN-END:variables

    public static List<Smena> vratiSmene() {
        ArrayList<Smena> lista = null;
        try {
            TransferObjekatZahtev toz = new TransferObjekatZahtev();
            toz.setOperacija(Operacije.VRATI_SMENE);
            KomunikacijaSaServerom.getInstanca().posaljiZahtev(toz);
            TransferObjekatOdgovor too = KomunikacijaSaServerom.getInstanca().primiOdgovor();
            lista = (ArrayList<Smena>) too.getRezultat();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Server nije pokrenut");
            Logger.getLogger(KontrolerKlijent.class.getName()).log(Level.SEVERE, null, ex);
        }
        return lista;
    }

    private List<Pregled> vratiPreglede() {
        ArrayList<Pregled> lista = null;
        try {
            TransferObjekatZahtev toz = new TransferObjekatZahtev();
            toz.setOperacija(Operacije.VRATI_LISTU_PREGLEDA);
            toz.setParametar(pacijent);
            KomunikacijaSaServerom.getInstanca().posaljiZahtev(toz);
            TransferObjekatOdgovor too = KomunikacijaSaServerom.getInstanca().primiOdgovor();
            lista = (ArrayList<Pregled>) too.getRezultat();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Server nije pokrenut");
            Logger.getLogger(KontrolerKlijent.class.getName()).log(Level.SEVERE, null, ex);
        }
        return lista;

    }
}
